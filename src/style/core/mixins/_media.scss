@use "sass:string";
@use "sass:map";
@use "sass:list";
@use '../configs/configs';

@function parse-expression($expr) {
  $val: "";
  $width: "";
  $result: "";
  $is-custom: true;
  $operator: string.slice($expr, 1, 1);
  $equally: string.slice($expr, 2, 2);

  // Checks if is $operator or $equally
  @if $operator == ">" or $operator == "<" and ($equally != "=") {
    $val: string.slice($expr, 2);
  } @else if $operator == ">" or $operator == "<" and $equally == "=" {
    $val: string.slice($expr, 3);
  } @else {
    $val: string.slice($expr, 1);
  }

  // Gets value
  @if map.has-key(configs.$breakpoints, $val) {
    $result: map.get(configs.$breakpoints, $val);
  } @else if map.has-key($mq, $val) {
    $result: map.get($mq, $val);
    $is-custom: false;
  } @else {
    $result: $val;
  }

  // Gets operator
  @if $is-custom == true {
    @if $operator == ">" and $equally != "=" {
      $result: "(min-width: #{$result})";
    } @else if $operator == "<" and $equally != "=" {
      $result: "(max-width: #{$result - 1})";
    } @else if $operator == "<" and $equally == "=" {
      $result: "(max-width: #{$result})";
    } @else if $operator == ">" and $equally == "=" {
      $result: "(min-width: #{$result})";
    }
  } @else {
    $result: $result;
  }

  @return $result;
}

@function concat($expressions) {
  $result: "";

  @each $expression in $expressions {
    @if string.length($result) != 0 {
      $result: $result + " and ";
    }

    $result: $result + $expression;
  }

  @return $result;
}

@mixin media($conditions...) {
  @for $i from 1 through list.length($conditions) {
    $conditions: list.set-nth($conditions, $i, parse-expression(list.nth($conditions, $i)));
  }

  $concats: concat($conditions);
  $mq: "";

  @each $concat in $concats {
    @if string.length($mq) != 0 {
      $mq: $mq + ", ";
    }

    $mq: $mq + $concat;
  }

  @media #{$mq} {
    @content;
  }
}

@mixin mq($width, $type: max, $second-width: false, $second-width-type: min) {
  @if map.has_key(configs.$breakpoints, $width) {
    $width: map.get(configs.$breakpoints, $width);

    @if $type == max {
      $width: $width - 1px;
    }

    @if $second-width {
      $second-width: map.get(configs.$breakpoints, $second-width);

      @if $second-width-type == max {
        $second-width: $second-width - 0.02px;
      }

      @media only screen and (#{$type}-width: $width) and (#{$second-width-type}-width: $second-width) {
        @content;
      }
    } @else {
      @media only screen and (#{$type}-width: $width) {
        @content;
      }
    }
  }
}
