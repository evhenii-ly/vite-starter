@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
/* stylelint-disable */
// $base-font-size
$text-base-size: 20px;

// $line-height
$line-height-base: 30px;

:root {
  --fs-base-value: #{$text-base-size};
  --fs-base: #{$text-base-size};
  --lh-base: 150%;
}

// font family
$font-family-fallback: 'Arial', sans-serif;
$font-family-lato: 'Lato', sans-serif;
$font-family-base: $font-family-lato;

:root {
  --ff-base: #{$font-family-base};
}

// Use $typefaces to render custom font using @font-face.
// $typefaces - {map}
// @family - {string}
// @weight - {integer} or {keyword} i.e. 800, bold
// @style - {keyword} i.e. normal, italic

$typefaces: (
  'Lato/Regular/Lato-Regular': (
    family: 'Lato',
    weight: 400,
    style: normal,
  ),
  'Lato/Bold/Lato-Bold': (
    family: 'Lato',
    weight: 500,
    style: normal,
  ),
  'Lato/Black/Lato-Black': (
    family: 'Lato',
    weight: 800,
    style: normal,
  ),
);


@if meta.variable-exists(typefaces) {
  @each $file, $option in $typefaces {
    @font-face {
      font-family: map.get(map.get($typefaces, $file), family);
      font-style: map.get(map.get($typefaces, $file), style);
      font-weight: map.get(map.get($typefaces, $file), weight);
      src: url('../../../font/#{$file}.ttf') format('truetype'),
      url('../../../font/#{$file}.woff') format('woff'),
      url('../../../font/#{$file}.woff2') format('woff2');
      font-display: swap;
    }
  }
}
